---
title: "Data Manipulation"
format: revealjs
editor: visual
smaller: true
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE)
```

## Why data manipulation?

Raw data might be **uninformative** or **incompatible** with a method. We want
to be able to modify, polish, subset, agglomerate and transform it.

![](images/paste-27F811B1.png){fig-align="center"}

## Why so complex?

TreeSE containers organise information to improve **flexibility** and
**accessibility**, which comes with a bit of complexity. Focus on **assays**,
**colData** and **rowData**.

![](images/paste-14DB8F76.png){fig-align="center"}

## Example 1.1: Data Import

We work with microbiome data inside `TreeSummarizedExperiment` (TreeSE) containers and `mia` is our toolkit.

```{r}
#| label: import-tengeler
# Load Tengeler2020 and store it into a TreeSE
library(mia)
data("Tengeler2020", package = "mia")
tse <- Tengeler2020
```

The components of a TreeSE can all be seen at a glance.

```{r}
# Print TreeSE
tse
```

## Example 1.2: Column data

Columns represent the samples of an experiment.

```{r}
# Retrieve sample names
head(colnames(tse), 3)
```

All information about the samples is stored in `colData`.

```{r}
# Retrieve sample data
head(colData(tse), 3)
```

Individual variables about the samples can be accessed directly.

```{r}
# Retrieve sample variables
head(tse$patient_status, 3)
```

## Example 1.3: Row data

Rows represent the features of an experiment.

```{r}
# Retrieve feature names
head(rownames(tse), 3)
```

All information about the samples is stored in `rowData`.

```{r}
# Retrieve feature data
head(rowData(tse), 3)
```

Individual variables about the samples can be accessed from `rowData`.

```{r}
# Retrieve feature variables
head(rowData(tse)$Genus, 3)
```

## Example 1.4: Assays

The assays of an experiment (counts, relative abundance, etc.) can be found in `assays`.

```{r}
assays(tse)
```

`assayNames` return only their names.

```{r}
assayNames(tse)
```

An individual assay can be retrieved with `assay`.

```{r}
assay(tse, "counts")[seq(6), seq(6)]
```

## Exercise 1

-   preliminary exploration: [exercise 3.3](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#preliminary-exploration){target="_blank"}
-   assay retrieval: [exercise 3.4](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#assay-retrieval){target="_blank"}

Extra:

-   constructing a TreeSE object: [exercise 3.1](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#sec-construct-TreeSE){target="_blank"}

Raw data can be retrieved
[here](https://github.com/microbiome/data){target="_blank"}.

## Example 2.1: Subsetting

We can subset features or samples of a TreeSE, but first we need to pick a variable.

```{r}
# Check levels of a sample variable
unique(tse$patient_status)
```

To subset samples, we filter columns with a conditional.

```{r}
# Subset by a sample variable
subcol_tse <- tse[ , tse$patient_status == "ADHD"]
dim(subcol_tse)
```

We now want to subset by our favourite Phylum.

```{r}
# Check levels of a feature variable
unique(rowData(tse)$Phylum)
```

To subset features, we filter rows with a conditional.

```{r}
# Subset by a feature variable
subrow_tse <- tse[rowData(tse)$Phylum == "Firmicutes", ]
dim(subrow_tse)
```

## Example 2.2: Agglomeration

Agglomeration condenses the assays to higher taxonomic ranks. Related taxa are combined together. We can agglomerate by different ranks.

```{r}
# View rank options
taxonomyRanks(tse)
```

We agglomerate by Phylum and store the new experiment in the `altExp` slot.

```{r}
# Agglomerate by Phylum and store into altExp slot
altExp(tse, "phylum") <- agglomerateByRank(tse, rank = "Phylum")
altExp(tse, "phylum")
```

## Example 2.3: Transformation

Data can be transformed for different reasons. For example, to make samples comparable we can use relative abundance.

```{r}
# Transform counts to relative abundance
tse <- transformAssay(tse,
                      assay.type = "counts",
                      method = "relabundance")

# View sample-wise sums
head(colSums(assay(tse, "relabundance")), 3)
```

Or to standardise features to the normal distribution we can use z-scores: $Z = \frac{x - \mu}{\sigma}$.

```{r}
# Transform relative abundance to z-scores
tse <- transformAssay(tse,
                      assay.type = "relabundance",
                      method = "z",
                      MARGIN = "features")

# View feature-wise standard deviations
head(rowSds(assay(tse, "z")), 3)
```

## Exercise 2

-   subsetting: [exercise 4.1](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#subsetting){target="_blank"}
-   agglomeration: [exercise 5.1](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#taxonomic-levels){target="_blank"}
-   transformation: [exercise 4.6](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#assay-transformation){target="_blank"}

Extra:

-   prevalence subsetting: [exercise 4.3](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#prevalent-and-core-taxonomic-features){target="_blank"}
-   alternative experiments: [exercise 5.2](https://microbiome.github.io/OMA/docs/devel/pages/98_exercises.html#alternative-experiments){target="_blank"}

## Resources

-   [mia function reference](https://microbiome.github.io/mia/reference/index.html){target="_blank"}
-   [OMA Section - Data Containers](https://microbiome.github.io/OMA/docs/devel/pages/04_containers.html#data-containers){target="_blank"}
-   [OMA Section - Subsetting](https://microbiome.github.io/OMA/docs/devel/pages/10_manipulation.html#subsetting){target="_blank"}
-   [OMA Section - Agglomeration](https://microbiome.github.io/OMA/docs/devel/pages/11_taxonomic_information.html#sec-data-agglomeration){target="_blank"}
-   [OMA Section - Transformation](https://microbiome.github.io/OMA/docs/devel/pages/11_taxonomic_information.html#sec-assay-transform){target="_blank"}
